#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes
#+STARTUP: overview

* Emacs conf
** Org conf tangling
#+BEGIN_SRC emacs-lisp
  (defun tangle-init ()
    (when (equal (buffer-file-name)
                 (expand-file-name (concat user-emacs-directory "init.org")))
      (let ((prog-mode-hook nil))
        (org-babel-tangle)
        (byte-compile-file (concat user-emacs-directory "init.el")))))
  (add-hook 'after-save-hook 'tangle-init)
#+END_SRC
** Package Management
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
  (add-to-list 'load-path "~/.emacs.d/load")
  (setq package-check-signature nil)
  (setq use-package-verbose nil)
  (setq package-enable-at-startup t)
  (package-initialize t)
#+END_SRC
** Keybinds
#+BEGIN_SRC emacs-lisp
  ; Quick previous buffer
  (global-set-key (kbd "C-c b")
   (lambda ()
   (interactive)
   (previous-buffer)))
  ; Quick next buffer
  (global-set-key (kbd "C-c f")
   (lambda ()
   (interactive)
   (next-buffer)))
  ; Quick toggle buffer
  (global-set-key (kbd "C-c t")
   (lambda ()
   (interactive)
    (switch-to-buffer (other-buffer (current-buffer) 1))))
  ; Man pages
  (global-set-key (kbd "C-c M")
   (lambda ()
   (interactive)
    (woman)))
  ; Recompile
  (global-set-key (kbd "C-c c")
   (lambda ()
   (interactive)
    (save-buffer)
    (recompile)))
  ; Revert buffer
  (global-set-key (kbd "C-c r")
   (lambda ()
   (interactive)
    (revert-buffer)))
  ; Switch to shell buffer
  (global-set-key (kbd "C-c s")
   (lambda ()
   (interactive)
    (switch-to-buffer "*shell*")))
  ; Go to org dir
  (global-set-key (kbd "C-c o")
   (lambda ()
   (interactive)
    (dired "~/Documents/org")))
  ; Go to org-agenda
  (global-set-key (kbd "C-c a")
   (lambda ()
   (interactive)
    (org-agenda)))
  ; Quick shell buff switch
  (global-set-key (kbd "C-c x")
   (lambda ()
   (interactive)
    (shell-command (read-from-minibuffer "exec: "))))
#+END_SRC
** Hooks
#+BEGIN_SRC emacs-lisp
  ; Emacs startup hook
  (add-hook `emacs-startup-hook
    (lambda ()
      (erase-buffer)
      (shell)
      (switch-to-buffer "*scratch*")
      (delete-other-windows)
      (global-company-mode)))
  ; Save Hook deleting trailing whitespace
  (add-hook 'after-save-hook
    (lambda ()
      (delete-trailing-whitespace)))
  ; Kill compilation buff and win if succesful
  (add-hook 'compilation-finish-functions
    (lambda (buf str)
      (if (null (string-match ".*exited abnormally.*" str))
        (kill-buffer-and-window))))
  ; Dired hook
  (add-hook 'dired-mode-hook
    (lambda ()
      'dired-hide-details-mode))
  ; Org hook
  (add-hook 'org-mode-hook
    (lambda ()
      (valign-mode)
      (setq-default fill-column 80)))
  ; Prog hook
  (add-hook 'prog-mode-hook
    (rainbow-mode))
#+END_SRC
** Visuals
*** Basics
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-startup-screen t)
#+END_SRC
*** Shrink Tabs
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq tab-width 2)
(setq js-indent-level 2)
(setq css-indent-offset 2)
(setq-default c-basic-offset 2)
(setq c-basic-offset 2)
(setq-default tab-width 2)
(setq-default c-basic-indent 2)
(setq-default pythone-indent 2)
(setq-default pythone-indent-offset 2)
#+END_SRC
*** Lines
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
(setq-default line-spacing 0)
(global-visual-line-mode 1)
(setq-default frame-title-format "%b (%f)")
#+END_SRC
*** Company Mode
#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   `(company-tooltip ((t (:inherit default :background "#BF55EC"))))
   `(company-scrollbar-bg ((t (:background "#220066"))))
   `(company-scrollbar-fg ((t (:background "#BF55EC"))))
   `(company-tooltip-selection ((t (:background "#663399"))))
   `(company-tooltip-common ((t (:background "#775599"))))
  )
#+END_SRC
*** Term Mode line
#+BEGIN_SRC emacs-lisp
  ; Modeline
  (custom-set-faces
   '(info-title-3 ((t (:foreground "#FFFFFF" :background "#5F00AF"))))
   '(info-title-4 ((t (:foreground "#FFFFFF" :background "#AF5FFF"))))
   '(info-title-1 ((t (:foreground "#5F00AF" :background "#AF5FFF"))))
   '(info-title-2 ((t (:foreground "#AF5FFF" :background "#5F00AF"))))
   '(info-xref ((t (:foreground "#5F00AF" :background "#000000"))))
   '(info-xref-visited ((t (:foreground "#AF5FFF" :background "#000000"))))
   '(mode-line ((t (:foreground "#FFFFFF" :background "#000000" :box nil :height 1.1))))
   '(mode-line-inactive ((t (:foreground "#FFFFFF" :background "#000000" :box nil :height .85))))
  )
  (setq-default mode-line-format (list
   '(:eval (propertize (concat " %b|%+ ") 'face '(info-title-3)))
   '(:eval (propertize (concat "") 'face '(info-title-1)))
   '(:eval (propertize (concat " %m ") 'face '(info-title-4)))
   '(:eval (propertize (concat "") 'face '(info-title-2)))
   '(:eval (propertize (concat " %o|L:%l ") 'face '(info-title-3)))
   '(:eval (propertize (concat "") 'face '(info-xref)))
  ))
  ; Turn off bell
  (setq visible-bell t)
  ; Set font
  (set-frame-font "inconsolata-11" nil t)
#+END_SRC
*** If Gui
#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
   ; Modeline
   (set-face-foreground 'mode-line "#FFFFFF")
   (set-face-background 'mode-line "#000000")
   (custom-set-faces
    '(info-title-3 ((t (:foreground "#FFFFFF" :background "#5F00AF"))))
    '(info-title-4 ((t (:foreground "#FFFFFF" :background "#AF5FFF"))))
    '(info-title-1 ((t (:foreground "#5F00AF" :background "#AF5FFF"))))
    '(info-title-2 ((t (:foreground "#AF5FFF" :background "#5F00AF"))))
    '(info-xref ((t (:foreground "#5F00AF" :background "#000000"))))
    '(info-xref-visited ((t (:foreground "#AF5FFF" :background "#000000"))))
    '(mode-line ((t (:foreground "#FFFFFF" :background "#000000" :box nil :height 1.1))))
    '(mode-line-inactive ((t (:foreground "#FFFFFF" :background "#000000" :box nil :height .85))))
    '(auto-dim-other-buffers-face ((t (:foreground "#FFFFFF" :background "#111111" :box nil))))
   )
   (setq-default mode-line-format (list
    '(:eval (propertize (concat " %b|%+ ") 'face '(info-title-3)))
    '(:eval (propertize (concat "") 'face '(info-title-1)))
    '(:eval (propertize (concat " %m ") 'face '(info-title-4)))
    '(:eval (propertize (concat "") 'face '(info-title-2)))
    '(:eval (propertize (concat " %o|L:%l ") 'face '(info-title-3)))
    '(:eval (propertize (concat "") 'face '(info-xref)))
   ))
   ; Set fg/bg color
   (set-foreground-color "#FFFFFF")
   (set-background-color "#222222")
   ; Opacity
   (set-frame-parameter (selected-frame) 'alpha '(70 . 70))
   (add-to-list 'default-frame-alist '(alpha . (70 . 70)))
   ; Dim inactive windows
   (auto-dim-other-buffers-mode t)
   ; Turn off bell
   (setq visible-bell t)
   ; Set font
   (set-frame-font "inconsolata-11" nil t)
   ; Remove key
   (global-unset-key (kbd "C-z"))
  )
#+END_SRC
** Functioning
*** Yes-no to y-n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Backups/autosave contained
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/saves")))
(defvar autosave-dir (concat "~/.emacs.d/saves" "/"))
#+END_SRC
*** Improve parens
#+BEGIN_SRC emacs-lisp
  (smartparens-global-mode)
  (global-highlight-parentheses-mode t)
  (custom-set-variables
    '(highlight-parentheses-background-colors '("#FFAAFF"))
    '(highlight-parentheses-colors
      '("#000000" "#FF11FF" "#BB11BB" "#991199" "#771187" "#661176" "#440154")))
  (highlight-parentheses--color-update)
#+END_SRC
** Orgmode
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords '(
   "TODO"
   "CURRENT"
   "TOSTART"
   "PAUSED"
   "BACKLOG"
   "WAITING"
   "|"
   "DONE"
   "CANCELLED"))
  (setq org-agenda-files '("~/Documents/life/todo.org"))
#+END_SRC
** Diary
#+BEGIN_SRC emacs-lisp
  (setq view-diary-entries-initially t
        mark-diary-entries-in-calender t
    number-of-diary-entries 100)
  (add-hook 'diary-display-hook 'fancy-diary-display)
  (add-hook 'today-visible-calander-hook 'calander-mark-today)
#+END_SRC
